/// example of memref initialization via uniform()
/// Generated by initialization.ipynb
func.func @start() {
	%zero = arith.constant 0 : index
	%v1 = memref.alloc() : memref<2x3xf32>
	affine.for %tmp = 0 to 1 {
		%arg0 = arith.constant 0 : index
		%arg1 = arith.constant 0 : index
		%s = arith.constant -0.250919762305275 : f32
		memref.store %s, %v1[%arg0, %arg1] : memref<2x3xf32>
	}
	affine.for %tmp = 0 to 1 {
		%arg0 = arith.constant 0 : index
		%arg1 = arith.constant 1 : index
		%s = arith.constant 0.9014286128198323 : f32
		memref.store %s, %v1[%arg0, %arg1] : memref<2x3xf32>
	}
	affine.for %tmp = 0 to 1 {
		%arg0 = arith.constant 0 : index
		%arg1 = arith.constant 2 : index
		%s = arith.constant 0.4639878836228102 : f32
		memref.store %s, %v1[%arg0, %arg1] : memref<2x3xf32>
	}
	affine.for %tmp = 0 to 1 {
		%arg0 = arith.constant 1 : index
		%arg1 = arith.constant 0 : index
		%s = arith.constant 0.1973169683940732 : f32
		memref.store %s, %v1[%arg0, %arg1] : memref<2x3xf32>
	}
	affine.for %tmp = 0 to 1 {
		%arg0 = arith.constant 1 : index
		%arg1 = arith.constant 1 : index
		%s = arith.constant -0.687962719115127 : f32
		memref.store %s, %v1[%arg0, %arg1] : memref<2x3xf32>
	}
	affine.for %tmp = 0 to 1 {
		%arg0 = arith.constant 1 : index
		%arg1 = arith.constant 2 : index
		%s = arith.constant -0.6880109593275947 : f32
		memref.store %s, %v1[%arg0, %arg1] : memref<2x3xf32>
	}

	return

}
